#include "xmlfilehandler.h"

#include <QString>
#include <QFile>
#include <QDebug>
#include <QDir>
#include <QDomDocument>
#include "helpers.h"
#include "projectmanager.h"

XmlFileHandler::XmlFileHandler(QString path, QString name)
{
	if ( QDir(path).exists() ) {
		filePath = path+"/"+name+".xml";
	} else {
		qDebug() << "ERROR from "<<__func__<<" Path does not exist!";
	}
}

XmlFileHandler::XmlFileHandler(QString file)
{//alternative Constructor with complete file path as parameter
	if ( !file.isNull() ) {
		if ( QFile(file).exists() ) {
			this->filePath = file;
		} else {
			qDebug() << "ERROR from "<<__func__<<" Path does not exist!";
		}
	}
}

XmlFileHandler::~XmlFileHandler()
{

}

void XmlFileHandler::createFile()
{

	QFile file(filePath);

	if ( !file.exists() ) {
		if ( !file.open(QIODevice::ReadWrite) ) {
			qDebug() << "ERROR from "<<__func__<<" Could not create file";
		}
	} else {
		qDebug() << "ERROR from "<<__func__<<" File does already exist!";
	}

	file.close();
}

void XmlFileHandler::openFile()
{
	QFile file(filePath);
	QString content;
	if ( file.exists() ) {
		if ( !file.open(QIODevice::ReadWrite) ) {
			qDebug() << "ERROR from "<<__func__<<" Could not open file";
			return;
		}
	} else {
		qDebug() << "ERROR from "<<__func__<<" File does not exist";
		return;
	}

	content = QString::fromUtf8(file.readAll());
	file.close();

	MainWindow *mw = helpers::getMainWindow();
	mw->getEditor()->setPlainText(content);

	return;
}

void XmlFileHandler::XMLautoGenerate()
{
	ProjectManager *projectmanager = ProjectManager::getInstance();
	ProjectManager::projectSettings set = projectmanager->getNewProjectSettings();

	QFile templateFile(":/autogeneratedXML.xml");
	QDomDocument doc;
	doc = helpers::parseXMLFile(&templateFile);

	QDomElement root = doc.firstChildElement("ns0:RootFileSystem");
//	qDebug() << root.tagName();

	QDomNode projectNode;
	QDomNode targetNode;
	QDomNode rootChildNode = root.firstChild();
	while (!rootChildNode.isNull()) {
		QDomElement childElement = rootChildNode.toElement();
//		qDebug() << childElement.tagName();
		if ( childElement.tagName().compare("project") == 0 ) {
			projectNode = rootChildNode;
		} else if (childElement.tagName().compare("target") == 0) {
			targetNode = rootChildNode;
		}
		rootChildNode = rootChildNode.nextSibling();
	}

//	qDebug() << set.name;
//	qDebug() << set.version;
//	qDebug() << set.description;
//	qDebug() << set.buildtype;
//	qDebug() << set.suite;
//	qDebug() << set.host;
//	qDebug() << set.path;
//	qDebug() << set.proto;

	QDomNode mirrorNode;
	QDomNode projectChildNode = projectNode.firstChild();
	while( !projectChildNode.isNull() ) {
		QDomElement projectChildElement = projectChildNode.toElement();
//		qDebug() << projectChildElement.tagName();
		if (projectChildElement.tagName().compare("name") == 0) {
			projectChildNode.appendChild(doc.createTextNode(set.name));
		} else if(projectChildElement.tagName().compare("version") == 0){
			projectChildNode.appendChild(doc.createTextNode(set.version));
		} else if(projectChildElement.tagName().compare("description") == 0){
			projectChildNode.appendChild(doc.createTextNode(set.description));
		} else if(projectChildElement.tagName().compare("buildtype") == 0){
			projectChildNode.appendChild(doc.createTextNode(set.buildtype));
		} else if(projectChildElement.tagName().compare("suite") == 0){
			projectChildNode.appendChild(doc.createTextNode(set.suite));
		} else if(projectChildElement.tagName().compare("mirror") == 0){
			mirrorNode = projectChildNode;
		}

		projectChildNode = projectChildNode.nextSibling();
	}

	QDomNode mirrorChildNode = mirrorNode.firstChild();
	while ( !mirrorChildNode.isNull() ) {
		QDomElement mirrorChildElement = mirrorChildNode.toElement();
//		qDebug() << mirrorChildElement.tagName();
		if(mirrorChildElement.tagName().compare("primary_host") == 0){
			mirrorChildNode.appendChild(doc.createTextNode(set.host));
		} else if(mirrorChildElement.tagName().compare("primary_path") == 0 ){
			mirrorChildNode.appendChild(doc.createTextNode(set.path));
		} else if(mirrorChildElement.tagName().compare("primary_proto") == 0){
			mirrorChildNode.appendChild(doc.createTextNode(set.proto));
		}

		mirrorChildNode = mirrorChildNode.nextSibling();
	}

	/* Append empty values to nodes to avoid them being self-closing*/
	QDomNode targetChildNode = targetNode.firstChild();
	while (!targetChildNode.isNull()) {
		targetChildNode.appendChild(doc.createTextNode(""));
		targetChildNode = targetChildNode.nextSibling();
	}


	QByteArray xml = doc.toByteArray(4);

	QFile file(filePath);
	helpers::saveXMLChanges(&file, xml);
}


void XmlFileHandler::saveFile()
{

}


void XmlFileHandler::closeFile()
{

}

