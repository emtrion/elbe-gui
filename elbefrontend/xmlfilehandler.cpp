#include "xmlfilehandler.h"

#include <QDebug>
#include <QDir>
#include <QDomDocument>

#include "helpers.h"
#include "mainwindow.h"
#include "schemavalidation.h"
#include "filesystemwatcher.h"
#include "project.h"
#include "codeeditor.h"
#include "xmlutilities.h"


namespace XmlFileHandler {
	void createFile(const QString projectPath, const QString fileName)
	{
		Project *project = Project::getInstance();
		QString filePath;
		if ( project->projectHasFile() ) {
			//should not be reached because button should be disabled if xml already exists
			qDebug() << "ERROR from"<<__func__<<"There's already a xml in this project";
			return;
		}

		if ( QDir(projectPath).exists() ) {
			//the file path consists of projectpath + filename and xml fileextension
			filePath = projectPath+fileName+".xml";
		} else {
			qDebug() << "ERROR from "<<__func__<<" Path does not exist!";
			return;
		}

		QFile file(filePath);

		if ( !file.exists() ) {
			if ( !file.open(QIODevice::ReadWrite) ) {
				qDebug() << "ERROR from "<<__func__<<" Could not create file";
				return;
			}
		} else {
			qDebug() << "ERROR from "<<__func__<<" File does already exist!";
			return;
		}

		file.close();

		project->setProjectHasFile(true);
		project->setBuildXmlPath(projectPath);

		MainWindow *mw = helpers::getMainWindow();
		mw->changeNewXmlButtonEnabledStatus(false);

		XMLautoGenerate(filePath);
		openFile(filePath);
	}

	void openFile(const QString filePath)
	{
		XmlFile *filemanager = XmlFile::getInstance();

		//if another file is still open, close it
		if ( filemanager->isOpen() ) {
			closeFile();
		}

		QFile file(filePath);
		QFileInfo info(file);
		QString content;
		if ( file.exists() ) {
			if ( !file.open(QIODevice::ReadWrite) ) {
				qDebug() << "ERROR from "<<__func__<<" Could not open file";
				return;
			}
		} else {
			qDebug() << "ERROR from "<<__func__<<" File does not exist";
			return;
		}

		content = QString::fromUtf8(file.readAll());
		file.close();

		MainWindow *mw = helpers::getMainWindow();
		mw->editor()->setPlainText(content);
		mw->editor()->setEnabled(true);
		mw->editor()->setLineNumberAreaVisible(true);
		mw->setEditorTabVisible(true);
		mw->setOpenFileNameLabelText(info.fileName());

		filemanager->setCurrentFilePath(filePath);
		mw->enableActionsOnXMLOpen(true);

		filesystemWatcher::addPath(filemanager->currentFilePath());
		filemanager->setIsOpen(true);
		filemanager->setIsSaved(true);
		return;
	}

	void XMLautoGenerate(const QString filePath)
	{
		Project *project = Project::getInstance();
		ProjectProperties *properties = project->newProjectProperties();

		QFile templateFile(":/autogeneratedXML.xml");
		QDomDocument doc;
		doc = xmlUtilities::parseXMLFile(&templateFile);

		QDomElement root = doc.firstChildElement("ns0:RootFileSystem");

		QDomNode projectNode;
		QDomNode targetNode;
		QDomNode rootChildNode = root.firstChild();
		while ( !rootChildNode.isNull() ) {
			QDomElement childElement = rootChildNode.toElement();
			if ( childElement.tagName().compare("project") == 0 ) {
				projectNode = rootChildNode;
			} else if (childElement.tagName().compare("target") == 0) {
				targetNode = rootChildNode;
			}
			rootChildNode = rootChildNode.nextSibling();
		}

		QDomNode mirrorNode;
		QDomNode projectChildNode = projectNode.firstChild();
		while( !projectChildNode.isNull() ) {
			QDomElement projectChildElement = projectChildNode.toElement();
			if (projectChildElement.tagName().compare("name") == 0) {
				projectChildNode.appendChild(doc.createTextNode(properties->name()));
			} else if(projectChildElement.tagName().compare("version") == 0){
				projectChildNode.appendChild(doc.createTextNode(properties->version()));
			} else if(projectChildElement.tagName().compare("description") == 0){
				projectChildNode.appendChild(doc.createTextNode(properties->description()));
			} else if(projectChildElement.tagName().compare("buildtype") == 0){
				projectChildNode.appendChild(doc.createTextNode(properties->buildtype()));
			} else if(projectChildElement.tagName().compare("suite") == 0){
				projectChildNode.appendChild(doc.createTextNode(properties->suite()));
			} else if(projectChildElement.tagName().compare("mirror") == 0){
				mirrorNode = projectChildNode;
			}
			projectChildNode = projectChildNode.nextSibling();
		}

		QDomNode mirrorChildNode = mirrorNode.firstChild();
		while ( !mirrorChildNode.isNull() ) {
			QDomElement mirrorChildElement = mirrorChildNode.toElement();
			if ( mirrorChildElement.tagName().compare("primary_host") == 0 ) {
				mirrorChildNode.appendChild(doc.createTextNode(properties->host()));
			} else if ( mirrorChildElement.tagName().compare("primary_path") == 0 ) {
				mirrorChildNode.appendChild(doc.createTextNode(properties->path()));
			} else if ( mirrorChildElement.tagName().compare("primary_proto") == 0 ) {
				mirrorChildNode.appendChild(doc.createTextNode(properties->proto()));
			}
			mirrorChildNode = mirrorChildNode.nextSibling();
		}

		//Append empty values to nodes to avoid them being self-closing
		QDomNode targetChildNode = targetNode.firstChild();
		while ( !targetChildNode.isNull() ) {
			targetChildNode.appendChild(doc.createTextNode(""));
			targetChildNode = targetChildNode.nextSibling();
		}

		QByteArray xml = doc.toByteArray(4);

		QFile file(filePath);
		xmlUtilities::saveXMLChanges(&file, xml);
	}

	void saveFile()
	{
		XmlFile *filemanager = XmlFile::getInstance();
		if ( filemanager->isSaved()) {
			return;
		}

		//tells that the app is currently saving.
		filemanager->setSaving(true);
		MainWindow *mw = helpers::getMainWindow();

		QByteArray content = mw->editor()->toPlainText().toUtf8();
		QFile file(filemanager->currentFilePath());

		if ( file.open(QIODevice::ReadWrite | QIODevice::Truncate) ) {
			if ( file.write(content) < 0 ) {
				qDebug() << "ERROR from "<<__func__<<" Cannot write to file";
			}
		} else {
			qDebug() << "ERROR from "<<__func__<<" Cannot open file";
			return;
		}
		file.close();

		SchemaValidation *schemavalidation = new SchemaValidation(mw->editor()->toPlainText());
		schemavalidation->validate();

		filemanager->setIsSaved(true);
	}

	void closeFile()
	{
		XmlFile *file = XmlFile::getInstance();

		MainWindow *mw = helpers::getMainWindow();
		if ( file->isSaved() ) {
			mw->editor()->clear();
			mw->editor()->setEnabled(false);
			mw->editor()->setLineNumberAreaVisible(false);
			mw->setEditorTabVisible(false);
		} else {
			int ret = helpers::showMessageBox(file->currentFileName()+" has been modified.",
											  "Do you want to save your changes?",
											  QMessageBox::StandardButtons(QMessageBox::Save | QMessageBox::Discard | QMessageBox::Cancel),
											  QMessageBox::Save);
			switch (ret) {
				case QMessageBox::Save:
					saveFile();
					closeFile();
					break;
				case QMessageBox::Discard:
					//on discard, we pretend to save the file...
					file->setIsSaved(true);
					//...otherwise we would be stuck in a loop
					closeFile();
					break;
				case QMessageBox::Cancel:
					//do nothing
					return;
				default:
					// should never be reached
					break;
			}
		}
		//method returns when the action was canceld so the below is not executed
		filesystemWatcher::removePath(file->currentFilePath());
		file->setToDefault();
		mw->enableActionsOnXMLOpen(false);
		return;
	}

	void handleFileModification(QString file)
	{
		XmlFile *filemanager = XmlFile::getInstance();

		//check if the file which triggered the signal is open because if it isn't we don't bother
		if ( file.compare(filemanager->currentFilePath()) == 0 ) {
			 //check if saveFile() was just called meaning it triggered the signal so we don't need to handle it
			if ( !filemanager->saving() ) {
				int ret = helpers::showMessageBox(filemanager->currentFileName()+" has been modified outside elbeFrontend",
										"Do you want to reload it?",
										QMessageBox::StandardButtons(QMessageBox::Yes | QMessageBox::No | QMessageBox::Cancel),
										QMessageBox::Yes);
				switch (ret) {
					case QMessageBox::Yes:
						//force update by close and re-open
						closeFile();
						openFile(file);
						break;
					case QMessageBox::No:
						//just set state to unsafed to avoid conflicts with filesystem
						filemanager->setIsSaved(false);
						break;
					case QMessageBox::Cancel:
						//do nothing
						break;
					default:
						//should not be reached
						break;
				}
			}
		}
		filemanager->setSaving(false);
	}
}
